[
  {"id":"adeliComputeraidedAnalysis1986a","author":[{"family":"Adeli","given":"H."},{"family":"Paek","given":"Y. J."}],"container-title":"Computers & structures","issue":"3","issued":{"date-parts":[[1986]]},"page":"393-407","source":"Google Scholar","title":"Computer-aided analysis of structures in INTERLISP environment","type":"article-journal","volume":"23"},
  {"id":"affenzellerCASTFSM2001","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Affenzeller","given":"Michael"},{"family":"Pichler","given":"Franz"},{"family":"Mittelmann","given":"Rudolf"}],"collection-editor":[{"family":"Goos","given":"Gerhard"},{"family":"Hartmanis","given":"Juris"},{"family":"Leeuwen","given":"Jan","non-dropping-particle":"van"}],"container-title":"Computer Aided Systems Theory — EUROCAST 2001","DOI":"10.1007/3-540-45654-6_3","editor":[{"family":"Moreno-Díaz","given":"Roberto"},{"family":"Buchberger","given":"Bruno"},{"family":"Luis Freire","given":"José"}],"event-place":"Berlin, Heidelberg","ISBN":"978-3-540-42959-3 978-3-540-45654-4","issued":{"date-parts":[[2001]]},"language":"en","page":"36-44","publisher":"Springer Berlin Heidelberg","publisher-place":"Berlin, Heidelberg","source":"DOI.org (Crossref)","title":"On CAST.FSM Computation of Hierarchical Multi-layer Networks of Automata","type":"chapter","URL":"http://link.springer.com/10.1007/3-540-45654-6_3","volume":"2178"},
  {"id":"balbanMethodApparatus1991","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Balban","given":"Morton S."}],"issued":{"date-parts":[[1991,1,15]]},"number":"US4984773A","submitted":{"date-parts":[["1987",10,6]]},"title":"Method of and apparatus for composing a press imposition","type":"patent","URL":"https://patents.google.com/patent/US4984773A"},
  {"id":"barelaIntroducingDarkstar2019","abstract":"Via libingcomputers.org: Josh Dersch writes about research into the Xerox 8010 Information System (codenamed “Dandelion” during development) and commonly referred to as the Star. The Star was envis…","accessed":{"date-parts":[[2021,4,21]]},"author":[{"family":"Barela","given":"Anne"}],"container-title":"Adafruit Industries - Makers, hackers, artists, designers and engineers!","issued":{"date-parts":[[2019,1,23]]},"language":"en-US","title":"Introducing Darkstar: A Xerox Star Emulator","title-short":"Introducing Darkstar","type":"post-weblog","URL":"https://blog.adafruit.com/2019/01/23/introducing-darkstar-a-xerox-star-emulator-vintagecomputing-xerox-emulation/"},
  {"id":"barkeleyProgrammingLanguage1974a","accessed":{"date-parts":[[2021,4,21]]},"author":[{"family":"Barkeley","given":"Edmund"},{"family":"Bobrow","given":"Daniel"}],"edition":"4th","ISBN":"0-262-59004-2","issued":{"date-parts":[[1974]]},"publisher":"The M.I.T. Press","title":"The Programming Language LISP: Its Operation and Applications","type":"book","URL":"https://www.google.com/search?client=firefox-b-d&q=The+Programming+Language+LISP%3A+Its+Operation+and+Applications+Information+International%2C+Inc.+Edmund+C.+Berkeley+and+Daniel+G.+Bobrow%2C+editors"},
  {"id":"batesImplementationInterlisp1982","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Bates","given":"Raymond L."},{"family":"Dyer","given":"David"},{"family":"Koomen","given":"Johannes A. G. M."}],"container-title":"Proceedings of the 1982 ACM symposium on LISP and functional programming  - LFP '82","DOI":"10.1145/800068.802138","event":"the 1982 ACM symposium","event-place":"Pittsburgh, Pennsylvania, United States","ISBN":"978-0-89791-082-8","issued":{"date-parts":[[1982]]},"language":"en","page":"81-87","publisher":"ACM Press","publisher-place":"Pittsburgh, Pennsylvania, United States","source":"DOI.org (Crossref)","title":"Implementation of Interlisp on the VAX","type":"paper-conference","URL":"http://portal.acm.org/citation.cfm?doid=800068.802138"},
  {"id":"batesInterlispVAXUsers1982","accessed":{"date-parts":[[2021,4,23]]},"author":[{"family":"Bates","given":"Raymond"},{"family":"David","given":"Dayer"},{"family":"Koomen","given":"Johannes"},{"family":"Saunders","given":"Steven"},{"family":"Voreck","given":"Donald"}],"issued":{"date-parts":[[1982]]},"title":"Interlisp-VAX Users Manual","type":"article","URL":"http://www.softwarepreservation.org/projects/LISP/interlisp/Interlisp-VAX-Users_Manual.pdf/view"},
  {"id":"batesRecentDevelopments1984a","author":[{"family":"Bates","given":"Raymond L."},{"family":"Dyer","given":"David"},{"family":"Feber","given":"Mark"}],"container-title":"Proceedings of the 1984 ACM Symposium on LISP and functional programming","issued":{"date-parts":[[1984]]},"page":"129-139","source":"Google Scholar","title":"Recent developments in ISI-Interlisp","type":"paper-conference"},
  {"id":"beckerAQINTERLISPINTERLISP1983","author":[{"family":"Becker","given":"Jeffrey M."}],"issued":{"date-parts":[[1983]]},"source":"Google Scholar","title":"AQINTERLISP: An INTERLISP Program for Inductive Generalization of VL1 Event Sets","title-short":"AQINTERLISP","type":"article-journal"},
  {"id":"bobrowCompactEncodings1979e","abstract":"List structures provide a general mechanism for representing easily changed structured data, but can introduce inefficiencies in the use of space when fields of uniform size are used to contain pointers to data and to link the structure. Empirically determined regularity can be exploited to provide more space-efficient encodings without losing the flexibility inherent in list structures. The basic scheme is to provide compact pointer fields big enough to accommodate most values that occur in them and to provide “escape” mechanisms for exceptional cases. Several examples of encoding designs are presented and evaluated, including two designs currently used in Lisp machines. Alternative escape mechanisms are described, and various questions of cost and implementation are discussed. In order to extrapolate our results to larger systems than those measured, we propose a model for the generation of list pointers and we test the model against data from two programs. We show that according to our model, list structures with compact\ncdr\nfields will, as address space grows, continue to be compacted well with a fixed-width small field. Our conclusion is that with a microcodable processor, about a factor of two gain in space efficiency for list structure can be had for little or no cost in processing time.","accessed":{"date-parts":[[2021,4,21]]},"author":[{"family":"Bobrow","given":"Daniel G."},{"family":"Clark","given":"Douglas W."}],"container-title":"ACM Transactions on Programming Languages and Systems","container-title-short":"ACM Trans. Program. Lang. Syst.","DOI":"10.1145/357073.357081","ISSN":"0164-0925, 1558-4593","issue":"2","issued":{"date-parts":[[1979,10]]},"language":"en","page":"266-286","source":"DOI.org (Crossref)","title":"Compact Encodings of List Structure","type":"article-journal","URL":"https://dl.acm.org/doi/10.1145/357073.357081","volume":"1"},
  {"id":"bobrowExtendingInterlisp1979a","author":[{"family":"Bobrow","given":"Daniel G."},{"family":"Deutsch","given":"L. Peter"}],"container-title":"International Symposium on Symbolic and Algebraic Manipulation","issued":{"date-parts":[[1979]]},"page":"481-489","publisher":"Springer","source":"Google Scholar","title":"Extending interlisp for modularization and efficiency","type":"paper-conference"},
  {"id":"bobrowFormatDirectedList1966","accessed":{"date-parts":[[2021,4,23]]},"author":[{"family":"Bobrow","given":"D. G."},{"family":"Teitelman","given":"W."}],"issued":{"date-parts":[[1966,4,1]]},"number":"BBN Report 1366","title":"Format-Directed List Processing in LISP, BBN Report 136","type":"report","URL":"https://apps.dtic.mil/dtic/tr/fulltext/u2/633242.pdfhttps://apps.dtic.mil/dtic/tr/fulltext/u2/633242.pdfhttps://apps.dtic.mil/dtic/tr/fulltext/u2/633242.pdfhttps://apps.dtic.mil/dtic/tr/fulltext/u2/633242.pdfhttps://apps.dtic.mil/dtic/tr/fulltext/u2/633242.pdf"},
  {"id":"bobrowInterlispPerformance1976a","author":[{"family":"Bobrow","given":"Robert"},{"family":"Grignetti","given":"Mario"}],"issued":{"date-parts":[[1976]]},"publisher":"BOLT BERANEK AND NEWMAN INC CAMBRIDGE MA","source":"Google Scholar","title":"Interlisp performance measurements","type":"report"},
  {"id":"bobrowLISPBulletin1969c","abstract":"This first (long delayed) LISP Bulletin contains samples of most of those types of items which the editor feels are relevant to this publication. These include announcements of new (i.e. not previously announced here) implementations of LISP (or closely related) systems; quick tricks in LISP; abstracts of LISP related papers; short writeups and listings of useful programs; and longer articles on problems of general interest to the entire LISP community. Printing of these last articles in the Bulletin does not interfere with later publications in formal journals or books. Short write-ups of new features added to LISP are of interest, preferably upward compatible with LISP 1.5, especially if they are illustrated by programming examples.","accessed":{"date-parts":[[2021,4,25]]},"author":[{"family":"Bobrow","given":"D. G."}],"container-title":"ACM SIGPLAN Notices","container-title-short":"SIGPLAN Not.","DOI":"10.1145/1132291.1132032","ISSN":"0362-1340","issue":"9","issued":{"date-parts":[[1969,9,1]]},"page":"17-57","source":"September 1969","title":"LISP bulletin","type":"article-journal","URL":"https://doi.org/10.1145/1132291.1132032","volume":"4"},
  {"id":"bobrowLOOPSProject2003","author":[{"family":"Bobrow","given":"M"}],"issued":{"date-parts":[[2003]]},"language":"en","source":"Zotero","title":"The LOOPS project","type":"article"},
  {"id":"bobrowModelStack1973","abstract":"Many control and access environment structures require that storage for a procedure activation exist at times when control is not nested within the procedure activated. This is straightforward to implement by dynamic storage allocation with linked blocks for each activation, but rather expensive in both time and space. This paper presents an implementation technique using a single stack to hold procedure activation storage which allows retention of that storage for durations not necessarily tied to control flow. The technique has the property that, in the simple case, it runs identically to the usual automatic stack allocation and deallocation procedure. Applications of this technique to multitasking, coroutines, backtracking, label-valued variables, and functional arguments are discussed. In the initial model, a single real processor is assumed, and the implementation assumes multiple-processes coordinate by passing control explicitly to one another. A multiprocessor implementation requires only a few changes to the basic technique, as described.","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Bobrow","given":"Daniel G."},{"family":"Wegbreit","given":"Ben"}],"container-title":"Communications of the ACM","container-title-short":"Commun. ACM","DOI":"10.1145/362375.362379","ISSN":"0001-0782, 1557-7317","issue":"10","issued":{"date-parts":[[1973,10]]},"language":"en","page":"591-603","source":"DOI.org (Crossref)","title":"A model and stack implementation of multiple environments","type":"article-journal","URL":"https://dl.acm.org/doi/10.1145/362375.362379","volume":"16"},
  {"id":"bobrowNewProgramming1974a","author":[{"family":"Bobrow","given":"Daniel G."},{"family":"Raphael","given":"Bertram"}],"container-title":"ACM Computing Surveys (CSUR)","issue":"3","issued":{"date-parts":[[1974]]},"page":"153-174","source":"Google Scholar","title":"New programming languages for artificial intelligence research","type":"article-journal","volume":"6"},
  {"id":"bobrowNoteEfficiency1968e","abstract":"The problem of the use of two levels of storage for programs is explored in the context of a LISP system which uses core memory as a buffer for a large virtual memory stored on a drum. Details of timing are given for one particular problem.","accessed":{"date-parts":[[2021,4,21]]},"author":[{"family":"Bobrow","given":"Daniel G."},{"family":"Murphy","given":"Daniel L."}],"container-title":"Communications of the ACM","container-title-short":"Commun. ACM","DOI":"10.1145/363567.363581","ISSN":"0001-0782, 1557-7317","issue":"8","issued":{"date-parts":[[1968,8]]},"language":"en","page":"558","source":"DOI.org (Crossref)","title":"A note on the efficiency of a LISP computation in a paged machine","type":"article-journal","URL":"https://dl.acm.org/doi/10.1145/363567.363581","volume":"11"},
  {"id":"bobrowNoteHash1975","abstract":"In current machine designs, a machine address gives the user direct access to a single piece of information, namely the contents of that machine word. This note is based on the observation that it is often useful to associate additional information, with some (relatively few) address locations determined at run time, without the necessity of preallocating the storage at all possible such addresses. That is, it can be useful to have an effective extra bit, field, or address in some words without every word having to contain a bit (or bits) to mark this as a special case. The key idea is that this extra associated information can be found by a table search. Although it could be found by any search technique (e.g. linear, binary sorted, etc.), we suggest that an appropriate low overhead mechanism is to use hash search on a table in which the key is the address of the cell to be augmented.","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Bobrow","given":"Daniel G."}],"container-title":"Communications of the ACM","container-title-short":"Commun. ACM","DOI":"10.1145/360881.360920","ISSN":"0001-0782, 1557-7317","issue":"7","issued":{"date-parts":[[1975,7]]},"language":"en","page":"413-415","source":"DOI.org (Crossref)","title":"A note on hash linking","type":"article-journal","URL":"https://dl.acm.org/doi/10.1145/360881.360920","volume":"18"},
  {"id":"bobrowSTORAGEMANAGEMENT1966b","abstract":"Storage allocation, maintenance, and reclamation are handled automatically in LISP systems. Storage is allocated as needed, and a garbage collection process periodically reclaims storage no longer in use. A number of different garbage collection algorithms are described. A common property of most of these algorithms is that during garbage collection all other computation ceases. This is an untenable situation for programs which must respond to real time interrupts. The paper concludes with a proposal for an incremental garbage collection scheme which allows simultaneous computation and storage reclamation. (Author)","author":[{"family":"Bobrow","given":"Daniel"}],"issued":{"date-parts":[[1966,6,1]]},"page":"20","source":"ResearchGate","title":"STORAGE MANAGEMENT IN LISP","type":"article-journal"},
  {"id":"bobrowStructureLISP1967","abstract":"In an ideal list-processing system there would be enough core memory to contain all the data and programs. Described in this paper are a number of techniques that have been used to build a LISP system utilizing a drum for its principal storage medium, with a surprisingly low time penalty for use of this slow storage device. The techniques include careful segmentation of system programs, allocation of virtual memory to allow address arithmetic for type determination, and a special algorithm for building reasonably linearized lists. A scheme for binding variables is described which is good in this environment and allows for complete compatibility between compiled and interpreted programs with no special declarations.","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Bobrow","given":"Daniel G."},{"family":"Murphy","given":"Daniel L."}],"container-title":"Communications of the ACM","container-title-short":"Commun. ACM","DOI":"10.1145/363162.363185","ISSN":"0001-0782, 1557-7317","issue":"3","issued":{"date-parts":[[1967,3]]},"language":"en","page":"155-159","source":"DOI.org (Crossref)","title":"Structure of a LISP system using two-level storage","type":"article-journal","URL":"https://dl.acm.org/doi/10.1145/363162.363185","volume":"10"},
  {"id":"bouvinNoteCardsNotebooks2019","abstract":"Fifty years since the beginning of the Internet, and three decades of the Dexter Hypertext Reference Model and the World Wide Web mark an opportune time to take stock and consider how hypermedia has developed, and in which direction it might be headed. The modern Web has on one hand turned into a place where very few, very large companies control all major platforms with some highly unfortunately consequences. On the other hand, it has also led to the creation of a highly flexible and nigh ubiquitous set of technologies and practices, which can be used as the basis for future hypermedia research with the rise of computational notebooks as a prime example of a new kind of collaborative and highly malleable applications.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Bouvin","given":"Niels Olof"}],"collection-title":"HT '19","container-title":"Proceedings of the 30th ACM Conference on Hypertext and Social Media","DOI":"10.1145/3342220.3343666","event-place":"New York, NY, USA","ISBN":"978-1-4503-6885-8","issued":{"date-parts":[[2019,9,12]]},"page":"19–28","publisher":"Association for Computing Machinery","publisher-place":"New York, NY, USA","source":"ACM Digital Library","title":"From NoteCards to Notebooks: There and Back Again","title-short":"From NoteCards to Notebooks","type":"paper-conference","URL":"https://doi.org/10.1145/3342220.3343666"},
  {"id":"brachmanSpecialIssue1980","abstract":"In the fall of 1978 we decided to produce a special issue of the SIGART Newsletter devoted to a survey of current knowledge representation research. We felt that there were twe useful functions such an issue could serve. First, we hoped to elicit a clear picture of how people working in this subdiscipline understand knowledge representation research, to illuminate the issues on which current research is focused, and to catalogue what approaches and techniques are currently being developed. Second -- and this is why we envisaged the issue as a survey of many different groups and projects -- we wanted to provide a document that would enable the reader to acquire at least an approximate sense of how each of the many different research endesvours around the world fit into the field as a whole.It would of course be impossible to produce a final or definitive document accomplishing these goals: rather, we hoped that this survey could initiate a continuing dialogue on issues in representation, a project for which this newsletter seems the ideal forum. It has been many months since our original decision was made, but we are finally able to present the results of that survey. Perhaps more than anything else, it has emerged as a testament to an astounding range and variety of opinions held by many different people in many different places.The following few pages are intended as an introduction to the survey as a whole, and to this issue of the newsletter. We will briefly summarize the form that the survey took, discuss the strategies we followed in analyzing and tabulating responses, briefly review the overall sense we received from the answers that were submitted, and discuss various criticisms which were submitted along with the responses. The remainder of the volume has been designed to be roughly self-explanatory at each point, so that one may dip into it at different places at will. Certain conventions, however, particularly regarding indexing and tabulating, will also be explained in the remainder of this introduction.As editors, we are enormously grateful to the many people who devoted substantial effort to responding to our survey. It is our hope that the material presented here will be interesting and helpful to our readers, and that fruitful discussion of these and other issues will continue energetically and enthusiastically into the future.","accessed":{"date-parts":[[2021,4,25]]},"author":[{"family":"Brachman","given":"Ronald J."},{"family":"Smith","given":"Brian C."}],"container-title":"ACM SIGART Bulletin","container-title-short":"SIGART Bull.","DOI":"10.1145/1056751.1056752","ISSN":"0163-5719","issue":"70","issued":{"date-parts":[[1980,2,1]]},"page":"1-138","source":"February 1980","title":"Special issue on knowledge representation","type":"article-journal","URL":"https://doi.org/10.1145/1056751.1056752"},
  {"id":"burtonOverviewStatus1980f","abstract":"DoradoLisp is an implementation of the Interlisp programming system on a large personal computer. It has evolved from AltoLisp, an implementation on a less powerful machine. The major goal of the Dorado implementation was to eliminate the performance deficiencies of the previous system. This paper describes the current status of the system and discusses some of the issues that arose during its implementation. Among the techniques that helped us meet our performance goal were transferring much of the kernel software into Lisp, intensive use of performance measurement tools to determine the areas of worst performance, and use of the Interlisp programming environment to allow rapid and widespread improvements to the system code. The paper lists some areas in which performance was critical and offers some observations on how our experience might be useful to other implementations of Interlisp.","accessed":{"date-parts":[[2021,4,25]]},"author":[{"family":"Burton","given":"Richard R."},{"family":"Masinter","given":"L. M."},{"family":"Bobrow","given":"Daniel G."},{"family":"Haugeland","given":"Willie Sue"},{"family":"Kaplan","given":"Ronald M."},{"family":"Sheil","given":"B. A."}],"collection-title":"LFP '80","container-title":"Proceedings of the 1980 ACM conference on LISP and functional programming","DOI":"10.1145/800087.802812","event-place":"New York, NY, USA","ISBN":"978-1-4503-7396-8","issued":{"date-parts":[[1980,8,25]]},"page":"243-247","publisher":"Association for Computing Machinery","publisher-place":"New York, NY, USA","source":"ACM Digital Library","title":"Overview and status of DoradoLisp","type":"paper-conference","URL":"https://doi.org/10.1145/800087.802812"},
  {"id":"burtonPapersInterlispD","author":[{"family":"Burton","given":"Richard R"}],"collection-title":"COGNITIVE AND INSTRUCTIONAL SCIENCES SERIES CIS.5 (SSL-80-4","language":"en","page":"52","source":"Zotero","title":"Papers on Interlisp-D","type":"report"},
  {"id":"burtonPapersInterlispD1980","author":[{"family":"Burton","given":"Richard R."},{"family":"Kaplan","given":"Ronald M."},{"family":"Masinter","given":"B."},{"family":"Sheil","given":"B. A."},{"family":"Bell","given":"A."},{"family":"Bobrow","given":"D. G."},{"family":"Deutsch","given":"L. P."},{"family":"Haugeland","given":"W. S."}],"container-title":"XEROX PARC, SSL-80-4, Septembre","issued":{"date-parts":[[1980]]},"source":"Google Scholar","title":"Papers on interlisp-D","type":"article-journal"},
  {"id":"burtonSemanticGrammar1977","abstract":"One of the major stumbling blocks to more effective used computers by naive users is the lack of natural means of communication between the user and the computer system. This report discusses a paradigm for constructing efficient and friendly man-machine interface systems involving subsets of natural language for limited domains of discourse. As such this work falls somewhere between highly constrained formal language query systems and unrestricted natural language under-standing systems. The primary purpose of this research is not to advance our theoretical under-standing of natural language but rather to put forth a set of techniques for embedding both semantic/conceptual and pragmatic information into a useful natural language interface module. Our intent has been to produce a front end system which enables the user to concentrate on his problem or task rather than making him worry about how to communicate his ideas or questions to the machine.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Burton","given":"Richard R."}],"container-title":"ACM SIGART Bulletin","container-title-short":"SIGART Bull.","DOI":"10.1145/1045283.1045290","ISSN":"0163-5719","issue":"61","issued":{"date-parts":[[1977,2]]},"language":"en","page":"26-26","source":"DOI.org (Crossref)","title":"Semantic grammar: an engineering technique for constructing natural language understanding systems","title-short":"Semantic grammar","type":"article-journal","URL":"https://dl.acm.org/doi/10.1145/1045283.1045290"},
  {"id":"burwellComputerManipulation1985","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Burwell","given":"A. D. M."}],"container-title":"Journal of the Geological Society","container-title-short":"Journal of the Geological Society","DOI":"10.1144/gsjgs.142.5.0925","ISSN":"0016-7649, 2041-479X","issue":"5","issued":{"date-parts":[[1985,9]]},"language":"en","page":"925-926","source":"DOI.org (Crossref)","title":"Computer manipulation of geological exploration data","type":"article-journal","URL":"http://jgs.lyellcollection.org/lookup/doi/10.1144/gsjgs.142.5.0925","volume":"142"},
  {"id":"cardImageDisplay1998","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Card","given":"Stuart K."}],"issued":{"date-parts":[[1998,9,16]]},"number":"EP0471484B1","submitted":{"date-parts":[["1991",8,2]]},"title":"Image display systems","type":"patent","URL":"https://patents.google.com/patent/EP0471484B1"},
  {"id":"cardUserInterface1991","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Card","given":"Stuart K."}],"issued":{"date-parts":[[1991,12,10]]},"number":"US5072412A","submitted":{"date-parts":[["1987",3,25]]},"title":"User interface with multiple workspaces for sharing display system objects","type":"patent","URL":"https://patents.google.com/patent/US5072412A"},
  {"id":"denberGraphicsDisplay1992","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Denber","given":"Michel J."}],"issued":{"date-parts":[[1992,1,8]]},"number":"EP0464742A2","submitted":{"date-parts":[["1991",7,1]]},"title":"Graphics display system with improved dynamic menu selection","type":"patent","URL":"https://patents.google.com/patent/EP0464742A2"},
  {"id":"denberMethodApparatus1993","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Denber","given":"Michel J."}],"issued":{"date-parts":[[1993,10,5]]},"number":"US5250934A","submitted":{"date-parts":[["1990",12,31]]},"title":"Method and apparatus for thinning printed images","type":"patent","URL":"https://patents.google.com/patent/US5250934A"},
  {"id":"deutschEfficientIncremental1976","abstract":"This paper describes a new way of solving the storage reclamation problem for a system such as Lisp that allocates storage automatically from a heap, and does not require the programmer to give any indication that particular items are no longer useful or accessible. A reference count scheme for reclaiming non-self-referential structures, and a linearizing, compacting, copying scheme to reorganize all storage at the users discretion are proposed. The algorithms are designed to work well in systems which use multiple levels of storage, and large virtual address space. They depend on the fact that most cells are referenced exactly once, and that reference counts need only be accurate when storage is about to be reclaimed. A transaction file stores changes to reference counts, and a multiple reference table stores the count for items which are referenced more than once.","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Deutsch","given":"L. Peter"},{"family":"Bobrow","given":"Daniel G."}],"container-title":"Communications of the ACM","container-title-short":"Commun. ACM","DOI":"10.1145/360336.360345","ISSN":"0001-0782, 1557-7317","issue":"9","issued":{"date-parts":[[1976,9]]},"language":"en","page":"522-526","source":"DOI.org (Crossref)","title":"An efficient, incremental, automatic garbage collector","type":"article-journal","URL":"https://dl.acm.org/doi/10.1145/360336.360345","volume":"19"},
  {"id":"deutschExperienceMicroprogrammed1978","abstract":"This paper presents the design of an Interlisp system running on a microprogrammed minicomputer. We discuss the constraints imposed by compatibility requirements and by the hardware, the important design decisions, and the most prominent successes and failures of our design, and offer some suggestions for future designers of small Lisp systems. This extended abstract contains only qualitative results. Supporting measurement data will be presented at MICRO-11.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Deutsch","given":"L. Peter"}],"collection-title":"MICRO 11","container-title":"Proceedings of the 11th annual workshop on Microprogramming","event-place":"Pacific Grove, California, USA","issued":{"date-parts":[[1978,11,19]]},"page":"128–129","publisher":"IEEE Press","publisher-place":"Pacific Grove, California, USA","source":"ACM Digital Library","title":"Experience with a microprogrammed Interlisp system","type":"paper-conference"},
  {"id":"deutschExperienceMicroprogrammed1978a","author":[{"family":"Deutsch","given":"L. Peter"}],"container-title":"ACM SIGMICRO Newsletter","issue":"4","issued":{"date-parts":[[1978]]},"page":"128-129","source":"Google Scholar","title":"Experience with a microprogrammed Interlisp system","type":"article-journal","volume":"9"},
  {"id":"deutschLISPMachine1973","abstract":"This paper presents a machine designed for compact representation and rapid execution of LISP programs, The machine language is a factor of 2 to 5 more compact than S-expressions or conventional compiled code, and the compiler is extremely simple. The encoding scheme is potentially applicable to data as well as program. The machine also provides for user-defined data structures.","author":[{"family":"Deutsch","given":"L. Peter"}],"issued":{"date-parts":[[1973]]},"source":"CiteSeer","title":"A LISP Machine with Very Compact Programs","type":"report"},
  {"id":"ehrlichConversationAustin1998","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Ehrlich","given":"Kate"}],"container-title":"Interactions","container-title-short":"interactions","DOI":"10.1145/287821.287827","ISSN":"1072-5520","issue":"6","issued":{"date-parts":[[1998,11,1]]},"page":"36–47","source":"Nov./Dec. 1998","title":"A conversation with Austin Henderson","type":"article-journal","URL":"https://doi.org/10.1145/287821.287827","volume":"5"},
  {"id":"fatemanLisp2003","abstract":"Fortran (q.v.) is the only language in widespread use that is older than Lisp (LISt Processor). Lisp owes its longevity to two facts. First, its core elements occupy a kind of local optimum in the \"space\" of programming languages, given the resistance to purely notational changes. Recursive use of conditional expressions, representation of symbolic information externally by lists and internally by list data structures (q.v.), and the representation of programs in the same way as data will probably have a very long life.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Fateman","given":"Richard"},{"family":"McCarthy","given":"John"}],"container-title":"Encyclopedia of Computer Science","event-place":"GBR","ISBN":"978-0-470-86412-8","issued":{"date-parts":[[2003,1,1]]},"page":"991–992","publisher":"John Wiley and Sons Ltd.","publisher-place":"GBR","source":"ACM Digital Library","title":"Lisp","type":"chapter"},
  {"id":"fininTranslatingKLOne1982","author":[{"family":"Finin","given":"Tim"}],"container-title":"Proceedings of the Second KL-One Workshop","issued":{"date-parts":[[1982]]},"page":"106-114","source":"Google Scholar","title":"Translating KL-One from interlisp to Franzlisp","type":"paper-conference"},
  {"id":"foderaroLispEnvironments1987","abstract":"In this issue we survey the Lisp programming environment provided on the family of Lisp machines built by Xerox. These machines, which once ran only Interlisp-D, are now said to run 'Xerox Lisp' which is a combination of Interlisp-D and Common Lisp.","accessed":{"date-parts":[[2021,4,25]]},"author":[{"family":"Foderaro","given":"John"}],"container-title":"ACM SIGPLAN Lisp Pointers","container-title-short":"SIGPLAN Lisp Pointers","DOI":"10.1145/1317193.1317199","ISSN":"1045-3563","issue":"2","issued":{"date-parts":[[1987,6,1]]},"page":"33-35","source":"June-July 1987","title":"Lisp environments","type":"article-journal","URL":"https://doi.org/10.1145/1317193.1317199","volume":"1"},
  {"id":"gabrielPerformanceEvaluation1985","author":[{"family":"Gabriel","given":"Richard P."}],"issued":{"date-parts":[[1985]]},"publisher":"MIT press Cambridge, Mass.","source":"Google Scholar","title":"Performance and evaluation of Lisp systems","type":"book","volume":"263"},
  {"id":"InterlispDAAAI82","abstract":"17 new photos added to shared album","accessed":{"date-parts":[[2021,4,16]]},"container-title":"Google Photos","language":"en","title":"Interlisp-D at AAAI-82","type":"webpage","URL":"https://photos.google.com/share/AF1QipORUrk2uwraYYJVOZ2R8mH51U4n5uv30V1KJk5zvu5Pd5XtEXuXp8jg1BfwdHBHkw?key=OGxZSU5LbXZPaTdmbnU3QmZiOTRlYnR6SDdMNUJ3"},
  {"id":"kaislerInterlispLanguage1987","author":[{"family":"Kaisler","given":"Stephen H."},{"family":"Gladwin","given":"Lee A."}],"container-title":"IEEE Computer Architecture Letters","issue":"03","issued":{"date-parts":[[1987]]},"page":"94-94","source":"Google Scholar","title":"Interlisp: The Language and Its Usage","title-short":"Interlisp","type":"article-journal","volume":"2"},
  {"id":"kaplanFiniteState1995","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Kaplan","given":"Ronald M."}],"issued":{"date-parts":[[1995,9,12]]},"number":"US5450598A","submitted":{"date-parts":[["1992",3,18]]},"title":"Finite state machine data storage where data transition is accomplished without &hellip;","type":"patent","URL":"https://patents.google.com/patent/US5450598A"},
  {"id":"kaplanTextcompressionTechnique1994","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Kaplan","given":"Ronald M."}],"issued":{"date-parts":[[1994,6,28]]},"number":"US5325091A","submitted":{"date-parts":[["1992",9,9]]},"title":"Text-compression technique using frequency-ordered array of word-number mappers","type":"patent","URL":"https://patents.google.com/patent/US5325091A"},
  {"id":"karttunenWordPlay2007","abstract":"This article is a perspective on some important developments in semantics and in computational linguistics over the past forty years. It reviews two lines of research that lie at opposite ends of the field: semantics and morphology. The semantic part deals with issues from the 1970s such as discourse referents, implicative verbs, presuppositions, and questions. The second part presents a brief history of the application of finite-state transducers to linguistic analysis starting with the advent of two-level morphology in the early 1980s and culminating in successful commercial applications in the 1990s. It offers some commentary on the relationship, or the lack thereof, between computational and paper-and-pencil linguistics. The final section returns to the semantic issues and their application to currently popular tasks such as textual inference and question answering.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Karttunen","given":"Lauri"}],"container-title":"Computational Linguistics","container-title-short":"Comput. Linguist.","DOI":"10.1162/coli.2007.33.4.443","ISSN":"0891-2017","issue":"4","issued":{"date-parts":[[2007,12,1]]},"page":"443–467","source":"December 2007","title":"Word play","type":"article-journal","URL":"https://doi.org/10.1162/coli.2007.33.4.443","volume":"33"},
  {"id":"komorowskiQLOGProgramming1982a","author":[{"family":"Komorowski","given":"H. Jan"}],"issued":{"date-parts":[[1982]]},"publisher":"Clark","source":"Google Scholar","title":"QLOG: The programming environment for PROLOG in LISP","title-short":"QLOG","type":"book"},
  {"id":"koomenInterlispVirtual1980a","author":[{"family":"Koomen","given":"Johannes AGM"}],"genre":"PhD Thesis","issued":{"date-parts":[[1980]]},"publisher":"University of British Columbia","source":"Google Scholar","title":"The interlisp virtual machine: study of its design and its implementation as multilisp","title-short":"The interlisp virtual machine","type":"thesis"},
  {"id":"kurlanderInteractiveConstraintbased1992","abstract":"We describe enhancements to graphical search and replace that allow users to extend the capabilities of a graphical editor. Interactive constraint-based search and replace can search for objects that obey user-specified sets of constraints and automatically apply other constraints to modify these objects. We show how an interactive tool that employs this technique makes it possible for users to define sets of constraints graphically that modify existing illustrations or control the creation of new illustrations. The interace uses the same visual language as the editor and allows users to understand and create powerful rules without conventional programming. Rules can be saved and retrieved for use alone or in combination. Examples, generated with a working implementation, demonstrate applications to drawing beautification and transformation.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Kurlander","given":"David"},{"family":"Feiner","given":"Steven"}],"collection-title":"CHI '92","container-title":"Proceedings of the SIGCHI Conference on Human Factors in Computing Systems","DOI":"10.1145/142750.143053","event-place":"New York, NY, USA","ISBN":"978-0-89791-513-7","issued":{"date-parts":[[1992,6,1]]},"page":"609–618","publisher":"Association for Computing Machinery","publisher-place":"New York, NY, USA","source":"ACM Digital Library","title":"Interactive constraint-based search and replace","type":"paper-conference","URL":"https://doi.org/10.1145/142750.143053"},
  {"id":"lehtolaLanguagebasedEnvironment1985","abstract":"This paper introduces a special programming environment for the definition of grammars and for the implementation of corresponding parsers. In natural language processing systems it is advantageous to have linguistic knowledge and processing mechanisms separated. Our environment accepts grammars consisting of binary dependency relations and grammatical functions. Well-formed expressions of functions and relations provide constituent surroundings for syntactic categories in the form of two-way automata. These relations, functions, and automata are described in a special definition language.In focusing on high level descriptions a linguist may ignore computational details of the parsing process. He writes the grammar into a DPL-description and a compiler translates it into efficient LISP-code. The environment has also a tracing facility for the parsing process, grammar-sensitive lexical maintenance programs, and routines for the interactive graphic display of parse trees and grammar definitions. Translator routines are also available for the transport of compiled code between various LISP-dialects. The environment itself exists currently in INTERLISP and FRANZLISP. This paper focuses on knowledge engineering issues and does not enter linguistic argumentation.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Lehtola","given":"A."},{"family":"Jäppinen","given":"H."},{"family":"Nelimarkka","given":"E."}],"collection-title":"EACL '85","container-title":"Proceedings of the second conference on European chapter of the Association for Computational Linguistics","DOI":"10.3115/976931.976946","event-place":"USA","issued":{"date-parts":[[1985,3,27]]},"page":"98–106","publisher":"Association for Computational Linguistics","publisher-place":"USA","source":"ACM Digital Library","title":"Language-based environment for natural language parsing","type":"paper-conference","URL":"https://doi.org/10.3115/976931.976946"},
  {"id":"lenatCYCUsing1985b","author":[{"family":"Lenat","given":"Douglas B."},{"family":"Prakash","given":"Mayank"},{"family":"Shepherd","given":"Mary"}],"container-title":"AI magazine","issue":"4","issued":{"date-parts":[[1985]]},"page":"65-65","source":"Google Scholar","title":"CYC: Using common sense knowledge to overcome brittleness and knowledge acquisition bottlenecks","title-short":"CYC","type":"article-journal","volume":"6"},
  {"id":"lipkisDesignSystem1990","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Lipkis","given":"Thomas A."}],"issued":{"date-parts":[[1990,4,3]]},"number":"US4914567A","submitted":{"date-parts":[["1988",10,24]]},"title":"Design system using visual language","type":"patent","URL":"https://patents.google.com/patent/US4914567A"},
  {"id":"lispmemoSDS9401967","accessed":{"date-parts":[[2021,4,21]]},"author":[{"literal":"LISP Memo"}],"issued":{"date-parts":[[1967]]},"title":"TO: SDS 940 LISP Users FROM: Warren Teltelman SUBJECT: Recent Improvements to 940 LISP Library DATE: 10 April 1967 - Google Search","type":"article","URL":"https://www.google.com/search?client=firefox-b-d&q=TO%3A+SDS+940+LISP+Users+FROM%3A+Warren+Teltelman+SUBJECT%3A+Recent+Improvements+to+940+LISP+Library+DATE%3A+10+April+1967"},
  {"id":"maloneObjectorientedComputer1998","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Malone","given":"Thomas W."}],"issued":{"date-parts":[[1998,8,4]]},"number":"US5790116A","submitted":{"date-parts":[["1995",6,7]]},"title":"Object-oriented computer user interface","type":"patent","URL":"https://patents.google.com/patent/US5790116A"},
  {"id":"masinterGlobalProgram1980","accessed":{"date-parts":[[2021,4,21]]},"author":[{"family":"Masinter","given":"Larrry"}],"issued":{"date-parts":[[1980]]},"publisher":"PALO ALTO RESEARCH CENTER","title":"Global Program Analysis in an Interactive Environment","type":"thesis","URL":"https://larrymasinter.net/thesis.pdf"},
  {"id":"masinterInterlispReference1983","accessed":{"date-parts":[[2021,4,21]]},"author":[{"family":"Masinter","given":"Larry"}],"issued":{"date-parts":[[1983]]},"title":"Interlisp Reference Manual","type":"article","URL":"https://larrymasinter.net/86-interlisp-manual-opt.pdf"},
  {"id":"masinterInterlispVAXReport1981","accessed":{"date-parts":[[2021,4,23]]},"author":[{"family":"Masinter","given":"Larry"}],"issued":{"date-parts":[[1981]]},"number":"SUN-CS-81-879","publisher":"Department of Computer Science, Stanford University","title":"Interlisp-VAX: A Report","type":"report","URL":"http://www.softwarepreservation.org/projects/LISP/interlisp/Interlisp-VAX_A_Report.pdf/view"},
  {"id":"masinterLocalOptimization","accessed":{"date-parts":[[2021,4,21]]},"author":[{"literal":"Masinter"}],"title":"Local optimization in a compiler for stack-based Lisp machines | Proceedings of the 1980 ACM conference on LISP and functional programming","type":"paper-conference","URL":"https://dl.acm.org/doi/10.1145/800087.802810"},
  {"id":"masinterLocalOptimization1980","abstract":"We describe the local optimization phase of a compiler for translating the INTERLISP dialect of LISP into stack-architecture (0-address) instruction sets. We discuss the general organization of the compiler, and then describe the set of optimization techniques found most useful, based on empirical results gathered by compiling a large set of programs. The compiler and optimization phase are machine independent, in that they generate a stream of instructions for an abstract stack machine, which an assembler subsequently turns into the actual machine instructions. The compiler has been in successful use for several years, producing code for two different instruction sets.","accessed":{"date-parts":[[2021,4,26]]},"author":[{"family":"Masinter","given":"Larry M."},{"family":"Deutsch","given":"L. Peter"}],"collection-title":"LFP '80","container-title":"Proceedings of the 1980 ACM conference on LISP and functional programming","DOI":"10.1145/800087.802810","event-place":"New York, NY, USA","ISBN":"978-1-4503-7396-8","issued":{"date-parts":[[1980,8,25]]},"page":"223–230","publisher":"Association for Computing Machinery","publisher-place":"New York, NY, USA","source":"ACM Digital Library","title":"Local optimization in a compiler for stack-based Lisp machines","type":"paper-conference","URL":"https://doi.org/10.1145/800087.802810"},
  {"id":"mooreInterlispVirtual1976","abstract":"The INTERLISP Virtual Machine is the environment in which the INTERLISP System is implemented. It includes such abstract objects as \"Literal Atoms\", \"List Cells\", \"Integers\", etc., the basic LISP functions for manipulating them, the underlying program control and variable binding mechanisms, the input/output facilities, and interrupt processing facilities. In order to Implement the INTER LISP System (as described in The INTERLISP Reference Manual by W. Teitelman, et. al.) on some physical machine, it is only necessary to implement the INTERLISP Virtual Machine, since Virtual Machine compatible source code for the rest of the INTERLISP System can be obtained from publicly available files. This document specifies the behavior of the INTER LISP Virtual Machine from the implementor's point of view. That is, it is an attempt to make explicit those things which must be implemented to allow the INTERLISP System to run on some machine. KEY WORDS AND PHRASES programming language semantics, LISP, dynamic storage allocation, interpreters, spaghetti stacks, abstract data types, function objects, FUNARGs, applicative programming languages, control structures, interactive systems, DWIM, programmer's assistant, automatic error correction, eval, error handling, interrupt","author":[{"family":"Moore","given":"J. Strother"},{"family":"Moore","given":"J. Strother"}],"issued":{"date-parts":[[1976]]},"source":"CiteSeer","title":"The Interlisp Virtual Machine","type":"book"},
  {"id":"myersBackgroundINTERNIST1987","abstract":"During my tenure as Chairman of the Department of Medicine at the University of Pittsburgh, 1955 to 1970, two points became clear in regard to diagnosis in internal medicine. The first was that the knowledge base in that field had become vastly too large for any single person to encompass it. The second point was that the busy practitioner, even though he knew the items of information pertinent to his patients correct diagnosis, often did not consider the right answer particularly if the diagnosis was an unusual disease. I resigned the position of Chairman in 1970 intending to resume my position as Professor of Medicine. However, the University saw fit to offer me the appointment as University Professor (Medicine). The University of Pittsburgh follows the practice of Harvard University, established by President James Bryant Conant in the late 1930s, in which a University Professor is a professor at large and reports only to the president of the university. He has no department, no school and is not under administrative supervision by a dean or vice-president. Thus the position allows maximal academic freedom. In this new position I felt strongly that I should conduct worthwhile research. It was almost fifteen years since I had worked in my chosen field of clinical investigation, namely splanchnic blood flow and metabolism, and I felt that research in that area had passed me by. Remembering the two points mentioned earlier — the excessive knowledge base of internal medicine and the problem of considering the correct diagnosis — I asked myself what could be done to correct these problems. It seemed that the computer with its huge memory could correct the first and I wondered if it could not help as well with the second. At that point I knew no more about computers than the average layman so I sought advice. Dr. Gerhard Werner, our Chairman of Pharmacology, was working with computers in an attempt to map all of the neurological centers of the human brain stem with particular reference to their interconnections and functions. He was particularly concerned about the actions of pharmacological agents on this complex system. Working with him on this problem was Dr. Harry Pople, a computer scientist with special interest in “artificial intelligence”. The problem chosen was so complex and difficult that Werner and Pople were making little progress. Gerhard listened patiently to my ideas and promptly stated that he thought the projects were feasible utilizing the computer. In regard to the diagnostic component of my ambition he strongly advised that “artificial intelligence” be used. Pople was brought into the discussion and was greatly interested, I believe because of the feasibility of the project and the recognition of its practical application to the practice of medicine. The upshot was that Pople joined me in my project and Werner and Pople abandoned the work on the brain stem. Pople knew nothing about medicine and I knew nothing about computer science. Thus the first step in our collaboration was my analysis for Pople of the diagnostic process. I chose a goodly number of actual cases from clinical pathological conferences (CPCs) because they contained ample clinical data and because the correct diagnoses were known. At each small step of the way through the diagnostic process I was required to explain what the clinical information meant in context and my reasons for considering certain diagnoses. This provided to Pople insight into the diagnostic process. After analyzing dozens of such cases I felt as though I had undergone a sort of “psychoanalysis”. From this experience Pople wrote the first computer diagnostic programs seeking to emulate my diagnostic process. This has led certain “wags” to nickname our project “Jack in the box”. For this initial attempt Pople used the LISP computer language. We were granted access to the PROPHET PDP-10, a time-sharing mainframe maintained in Boston by the National Institutes of Health (NIH) but devoted particularly to pharmacological research. Thus we were interlopers. The first name we applied to our project was DIALOG, for diagnostic logic, but this had to be dropped because the name was in conflict with a computer program already on the market and copyrighted. The next name chosen was INTERNIST for obvious reason. However, the American Society for Internal Medicine publishes a journal entitled “The Internist” and they objected to our use of INTERNIST although there seems to be little relationship or conflict between a printed journal and a computer software program. Rather than fight the issue we simply added the Roman numeral one to our title which then became INTERNIST-I, which continues to this day. Pople's initial effort was unsuccessful, however. He diligently had incorporated details regarding anatomy and much basic pathophysiology, I believe because in my initial CPC analyses I had brought into consideration such items of information so that Pople could understand how I got from A to B etc. The diagnostician in internal medicine knows, of course, much anatomy and patho-physiology but these are brought into consideration in only a minority of diagnostic problems. He knows, for example, that the liver is in the right upper quadrant and just beneath the right leaf of the diaphragm. In most diagnostic instances this information is “subconscious”. Our first computer diagnostic program included too many such details and as a result was very slow and frequently got into analytical “loops” from which it could not extricate itself. We decided that we had to simplify the program but by that juncture much of 1971 had passed on. The new program was INTERNIST-I and even today most of the basic structure devised in 1972 remains intact. INTERNIST-I is written in INTERLISP and has operated on the PDP-10 and the DEC 2060. It has also been adapted to the VAX 780. Certain younger people have contributed significantly to the program, particularly Dr. Zachary Moraitis and Dr. Randolph Miller. The latter interrupted his regular medical school education to spend the year 1974-75 as a fellow in our laboratory and since finishing his formal medical education in 1979 has been active as a full time faculty member of the team. Several Ph.D. candidates in computer science have also made significant contributions as have dozens of medical students during electives on the project. INTERNIST-I is really quite a simple system as far as its operating system or inference engine is concerned. Three basic numbers are concerned in and manipulated in the ranking of elicited disease hypotheses. The first of these is the importance (IMPORT) of each of the more than 4,100 manifestations of disease which are contained in the knowledge base. IMPORTS are a global representation of the clinical importance of a given finding graded from 1 to 5, the latter being maximal, focusing on how necessary it is to explain the manifestation regardless of the final diagnosis. Thus massive splenomegaly has an IMPORT of 5 whereas anorexia has an IMPORT of 1. Mathematical weights are assigned to IMPORT numbers on a non-linear scale. The second basic number is the evoking strength (EVOKS), the numbers ranging from 0 to 5. The number answers the question, that given a particular manifestation of disease, how strongly does one consider disease A versus all other diagnostic possibilities in a clinical situation. A zero indicates that a particular clinical manifestation is non-specific, i.e. so widely spread among diseases that the above question cannot be answered usefully. Again, anorexia is a good example of a non-specific manifestation. The EVOKS number 5, on the other hand, indicates that a manifestation is essentially pathognomonic for a particular disease. The third basic number is the frequency (FREQ) which answers the question that given a particular disease what is the frequency or incidence of occurrence of a particular clinical finding. FREQ numbers range from 1 to 5, one indicating that the finding is rare or unusual in the disease and 5 indicating that the finding is present in essentially all instances of the disease. Each diagnosis which is evoked is ranked mathematically on the basis of support for it, both positive and negative. Like the import number, the values for EVOKS and FREQ numbers increase in a non-linear fashion. The establishment or conclusion of a diagnosis is not based on any absolute score, as in Bayesian systems, but on how much better is the support of diagnosis A as compared to its nearest competitor. This difference is anchored to the value of an EVOKS of 5, a pathognomonic finding. When the list of evoked diagnoses is ranked mathematically on the basis of EVOKS, FREQ and IMPORT, the list is partitioned based upon the similarity of support for individual diagnoses. Thus a heart disease is compared with other heart diseases and not brain diseases since the patient may have a heart disorder and a brain disease concommitantly. Thus apples are compared with apples and not oranges. When a diagnosis is concluded, the computer consults a list of interrelationships among diseases (LINKS) and bonuses are awarded, again in a non-linear fashion for numbers ranging from 1 to 5 — 1 indicating a weak interrelationship and 5 a universal interrelationship. Thus multiple interrelated diagnoses are preferred over independent ones provided the support for the second and other diagnoses is adequate. Good clinicians use this same rule of thumb. LINKS are of various types: PCED is used when disease A precedes disease B, e.g. acute rheumatic fever precedes early rheumatic valvular disease; PDIS - disease A predisposes to disease B, e.g. AIDS predisposes to pneumocystis pneumonia; CAUS - disease A causes disease B, e.g. thrombophlebitis of the lower extremities may cause pulmonary embolism; and COIN - there is a statistical interrelationship between disease A and disease B but scientific medical information is not explicit on the relationship, e.g. Hashimoto's thyroiditis coincides with pernicious anemia, both so called autoimmune diseases. The maximal number of correct diagnoses made in a single case analysis is, to my recollection, eleven. In working with INTERNIST-I during the remainder of the 1970s several important points about the system were learned or appreciated. The first and foremost of these is the importance of a complete and accurate knowledge base. Omissions from a disease profile can be particularly troublesome. If a manifestation of disease is not listed on a disease profile the computer can only conclude that that manifestation does not occur in the disease, and if a patient demonstrates the particular manifestation it counts against the diagnosis. Fortunately, repeated exercise of the diagnostic system brings to attention many inadvertent omissions. It is important to establish the EVOKS and FREQ numbers as accurately as possible. Continual updating of the knowledge base, including newly described diseases and new information about diseases previously profiled, is critical. Dr. Edward Feigenbaum recognized the importance of the accuracy and completeness of knowledge bases as the prime requisite of expert systems of any sort. He emphasized this point in his keynote address to MEDINFO-86 (1). Standardized, clear and explicit nomenclature is required in expressing disease names and particularly in naming the thousands of individual manifestations of disease. Such rigidity can make the use of INTERNIST-I difficult for the uninitiated user. Therefore, in QMR more latitude and guidance is provided the user. For example, the user of INTERNIST-I must enter ABDOMEN PAIN RIGHT UPPER QUADRANT exactly whereas in QMR the user may enter PAI ABD RUQ and the system recognizes the term as above. The importance of “properties” attached to the great majority of clinical manifestations was solidly evident. Properties express such conditions that if A is true then B is automatically false (or true as the case may be). The properties also allow credit to be awarded for or against B as the case may be. Properties also provide order to the asking of questions in the interrogative mode. They also state prerequisites and unrequisites for various procedures. As examples, one generally does not perform a superficial lymph node biopsy unless lymph nodes are enlarged (prerequisite). Similarly, a percutaneous liver biopsy is inadvisable if the blood platelets are less than 50,000 (unrequisite). It became clear quite early in the utilization of INTERNIST-I that systemic or multisystem diseases had an advantage versus localized disorders in diagnosis. This is because systemic diseases have very long and more inclusive manifestation lists. It became necessary, therefore, to subdivide systemic diseases into various components when appropriate. Systemic lupus erythematosus provides a good example. Lupus nephritis must be compared in our system with other renal diseases and such comparison is allowed by our partitioning algorithm. Likewise, cerebral lupus must be differentiated from other central nervous system disorders. Furthermore, either renal lupus or cerebral lupus can occur at times without significant clinical evidence of other systemic involvement. In order to reassemble the components of a systemic disease we devised the systemic LINK (SYST) which expresses the interrelationship of each subcomponent to the parent systemic disease. It became apparent quite early that expert systems like INTERNIST do not deal with the time axis of a disease well at all, and this seems to be generally true of expert systems in “artificial intelligence”. Certain parameters dealing with time can be expressed by devising particular manifestations, e.g. a blood transfusion preceding the development of acute hepatitis B by 2 to 6 months. But time remains a problem which is yet to be solved satisfactorily including QMR. It has been clearly apparent over the years that both the knowledge base and the diagnostic consultant programs of both INTERNIST-I and QMR have considerable educational value. The disease profiles, the list of diseases in which a given clinical manifestation occurs (ordered by EVOKS and FREQ), and the interconnections among diseases (LINKS) provide a quick and ready means of acquiring at least orienting clinical information. Such has proved useful not only to medical students and residents but to clinical practitioners as well. In the interrogative mode of the diagnostic systems the student will frequently ask “Why was that question asked?” An instructor can either provide insight or ready consultation of the knowledge base by the student will provide a simple semi-quantitative reason for the question. Lastly, let the author state that working with INTERNIST-I and QMR over the years seems to have had real influence on his own diagnostic approaches and habits. Thus my original psycho-analysis when working with Pople has been reinforced.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Myers","given":"J. D."}],"collection-title":"HMI '87","container-title":"Proceedings of ACM conference on History of medical informatics","DOI":"10.1145/41526.41543","event-place":"New York, NY, USA","ISBN":"978-0-89791-248-8","issued":{"date-parts":[[1987,12,1]]},"page":"195–197","publisher":"Association for Computing Machinery","publisher-place":"New York, NY, USA","source":"ACM Digital Library","title":"The background of INTERNIST I and QMR","type":"paper-conference","URL":"https://doi.org/10.1145/41526.41543"},
  {"id":"pbsnewshourComputerAssistedInstruction2012","abstract":"This clip looks at two examples of larger tutorial--CAI systems that were developed by the Ontario Institute for Studies and Education, and Xerox's PARC.\n\nIt is from Episode 7 of the classic 1983 television series, Bits and Bytes, which starred Luba Goy and Billy Van.  It was produced by TVOntario, but is no longer available for purchase.","accessed":{"date-parts":[[2021,5,2]]},"dimensions":"5:42","director":[{"literal":"PBS NewsHour"}],"issued":{"date-parts":[[2012,5,19]]},"source":"YouTube","title":"Computer-Assisted Instruction (Bits and Bytes, Episode 7)","type":"motion_picture","URL":"https://www.youtube.com/watch?v=eURtTV_qKw8&t=147s"},
  {"id":"pbsnewshourGraphicalProgramming2012","abstract":"Guy DesVignes and R. Wayne Oldford, 1988 \n \nThis video (in 3 pieces) describes the use of graphical programming with an example, showing the encapsulation of several steps of an analysis into a single reusable tool.   An INTERLISP-D programming environment with the object oriented system LOOPS is used for software development. \nWork is on a Xerox Lisp Workstation  (Xerox 1186). \n \nSecond of 3 pieces of a single video. \n \nFirst piece: Graphical Programming (1988) - Part 0 \n       Contains: \n        \"Opening\"   \n            -  Introduction by Wayne Oldford   \n               (refers to earlier video called \"Data Analysis Networks \n                in DINDE\")  \n       \"Part 0 Statistical Analysis Maps\" \n            - review of the interactive data analysis network representation  \n              of a statistical analysis. \n \nSecond piece:  Graphical Programming (1988) - Parts 1 and 2 \n       Contains: \n        \"Part 1   Toolboxes\"   \n            -  Review of the elements of a statistical toolbox in DINDE  \n       \"Part 2 The Analysis Path\" \n            - Demonstrates exploration of a path in an existing \n              analysis map and its representation as a pattern, \n              It is shown how to capture this pattern in DINDE as a new \n             new program represented as an \"AnalysisPath\" object.. \n              This is what is meant by  \"graphical programming\". \n \n \nThird piece: \"Graphical Programming (1988) - Part 3\" \n       Contains: \n        \"Part 3   Graphical Programming \n                        Example: Added Variable Plots\"   \n            - Demonstrates graphical programming by constructing \n              an added variable plot.  This is done by constructing the \n              appropriate analysis path on some data, capturing the pattern \n              adding it to the toolbox and then applying it to new data. \n \n        \"Summary\" \n \n \nSound has been cleaned up a little. \nComplete video also available in whole at  \n        stat-graphics.org/movies/graphical-programming.html","accessed":{"date-parts":[[2021,5,2]]},"dimensions":"11:17","director":[{"literal":"PBS NewsHour"}],"issued":{"date-parts":[[2012,2,17]]},"source":"YouTube","title":"Graphical Programming (1988) - Parts 1 and 2","type":"motion_picture","URL":"https://www.youtube.com/watch?v=wlN0hHLZL8c"},
  {"id":"pbsnewshourGraphicalProgramming2012a","abstract":"Guy DesVignes and R. Wayne Oldford, 1988 \n \nThis video (in 3 pieces) describes the use of graphical programming with an example, showing the encapsulation of several steps of an analysis into a single reusable tool.   An INTERLISP-D programming environment with the object oriented system LOOPS is used for software development. \nWork is on a Xerox Lisp Workstation  (Xerox 1186). \n \nFirst of 3 pieces of a single video. \n \nFirst piece: Graphical Programming (1988) - Part 0 \n       Contains: \n        \"Opening\"   \n            -  Introduction by a young Wayne Oldford   \n               (refers to earlier video called \"Data Analysis Networks \n                in DINDE\")  \n       \"Part 0 Statistical Analysis Maps\" \n            - review of the interactive data analysis network representation  \n              of a statistical analysis. \n \nSecond piece:  Graphical Programming (1988) - Parts 1 and 2 \n       Contains: \n        \"Part 1   Toolboxes\"   \n            -  Review of the elements of a statistical toolbox in DINDE  \n       \"Part 2 The Analysis Path\" \n            - Demonstrates exploration of a path in an existing \n              analysis map and its representation as a pattern, \n              It is shown how to capture this pattern in DINDE as a new \n             new program represented as an \"AnalysisPath\" object.. \n              This is what is meant by  \"graphical programming\". \n \n \nThird piece: \"Graphical Programming (1988) - Part 3\" \n       Contains: \n        \"Part 3   Graphical Programming \n                        Example: Added Variable Plots\"   \n            - Demonstrates graphical programming by constructing \n              an added variable plot.  This is done by constructing the \n              appropriate analysis path on some data, capturing the pattern \n              adding it to the toolbox and then applying it to new data. \n \n        \"Summary\" \n \n \nSound has been cleaned up a little. \nComplete video also available in whole at  \n        stat-graphics.org/movies/graphical-programming.html","accessed":{"date-parts":[[2021,5,2]]},"dimensions":"6:28","director":[{"literal":"PBS NewsHour"}],"issued":{"date-parts":[[2012,2,16]]},"source":"YouTube","title":"Graphical Programming (1988) - Part 0","type":"motion_picture","URL":"https://www.youtube.com/watch?v=J4F6ioMKiqw&t=53s"},
  {"id":"pbsnewshourInformationLens2021","abstract":"The Information Lens\nThomas Malone (MIT)\n\nCHI+GI '87 Technical Video Program\n\nAbstract\nAn intelligent system for information sharing and coordination (subtitle from the video)\n\nWEB:: http://www.cs.umd.edu/hcil/chivideosl...​\n\nPublished in two videotapes: issue 27, and issue 33-34 of ACM SIGGRAPH Video Review (issue 27 appeared in same tape as issue 26, i.e. the CHI '87 Electronic Theater).\nVideo Chair: Richard J. Beach (Xerox PARC)\nLocation: Toronto, Canada","accessed":{"date-parts":[[2021,5,2]]},"dimensions":"15:24","director":[{"literal":"PBS NewsHour"}],"issued":{"date-parts":[[2021,1,13]]},"source":"YouTube","title":"The Information Lens","type":"motion_picture","URL":"https://www.youtube.com/watch?v=o7P0cM5VqKc"},
  {"id":"pbsnewshourLispEditing2017","abstract":"Reuploaded from: \nhttp://people.csail.mit.edu/riastradh...​\n\nThanks to \"lispm\" on reddit for all the info: \nhttps://www.reddit.com/r/lisp/comment...​\n\nFrom what I understand SEdit was developed later than DEdit. SEdit is documented first in the 1987 Lyric release of Interlisp-D, see Appendix B:\nhttp://bitsavers.trailing-edge.com/pd...​\nSEdit is expanded in the virtual machine version of Interlisp-D, called Medley. See the Medley 1.0 release notes, appendix B:\nhttp://bitsavers.trailing-edge.com/pd...​\nSome hints for using SEdit\nhttp://bitsavers.trailing-edge.com/pd...​\nIf you want to try it out, maybe this contains the editors:\nhttp://www2.parc.com/isl/groups/nltt/...​","accessed":{"date-parts":[[2021,5,2]]},"dimensions":"4:53","director":[{"literal":"PBS NewsHour"}],"issued":{"date-parts":[[2017,6,22]]},"source":"YouTube","title":"Lisp Editing in the 80s - Interlisp SEdit","type":"motion_picture","URL":"https://www.youtube.com/watch?v=2qsmF8HHskg"},
  {"id":"raoRichInteraction1995b","abstract":"Effective information access involves rich interactions between users and information residing in diverse locations. Users seek and retrieve information from the sources—for example, file serves, databases, and digital libraries—and use various tools to browse, manipulate, reuse, and generally process the information. We have developed a number of techniques that support various aspects of the process of user/information interaction. These techniques can be considered attempts to increase the bandwidth and quality of the interactions between users and information in an information workspace—an environment designed to support information work (see Figure 1).","accessed":{"date-parts":[[2021,4,25]]},"author":[{"family":"Rao","given":"Ramana"},{"family":"Pedersen","given":"Jan O."},{"family":"Hearst","given":"Marti A."},{"family":"Mackinlay","given":"Jock D."},{"family":"Card","given":"Stuart K."},{"family":"Masinter","given":"Larry"},{"family":"Halvorsen","given":"Per-Kristian"},{"family":"Robertson","given":"George C."}],"container-title":"Communications of the ACM","container-title-short":"Commun. ACM","DOI":"10.1145/205323.205326","ISSN":"0001-0782","issue":"4","issued":{"date-parts":[[1995,4,1]]},"page":"29-39","source":"April 1995","title":"Rich interaction in the digital library","type":"article-journal","URL":"https://doi.org/10.1145/205323.205326","volume":"38"},
  {"id":"raoWindowSystem1992","accessed":{"date-parts":[[2021,4,16]]},"author":[{"family":"Rao","given":"Ramana B."}],"issued":{"date-parts":[[1992,6,9]]},"number":"US5121478A","submitted":{"date-parts":[["1990",11,15]]},"title":"Window system with independently replaceable window functionality","type":"patent","URL":"https://patents.google.com/patent/US5121478A"},
  {"id":"sandewallProgrammingInteractive1978a","author":[{"family":"Sandewall","given":"Erik"}],"container-title":"ACM Computing Surveys (CSUR)","issue":"1","issued":{"date-parts":[[1978]]},"page":"35-71","source":"Google Scholar","title":"Programming in an Interactive Environment: the“Lisp”Experience","title-short":"Programming in an Interactive Environment","type":"article-journal","volume":"10"},
  {"id":"sannellaInterLISPReference1983a","author":[{"family":"Sannella","given":"Michael"}],"issued":{"date-parts":[[1983]]},"publisher":"Xerox Corporation","source":"Google Scholar","title":"InterLISP Reference Manual","type":"book"},
  {"id":"schlumbergeroverseass.a.kualalumpurwestmalaysiaDipmeterAdvisor1987","accessed":{"date-parts":[[2021,4,15]]},"author":[{"literal":"Schlumberger Overseas S.A., Kuala Lumpur, West Malaysia"},{"family":"Shanor","given":"Gordy G."}],"container-title":"Bulletin of the Geological Society of Malaysia","container-title-short":"BGSM","DOI":"10.7186/bgsm21198703","ISSN":"01266187, 2637109X","issued":{"date-parts":[[1987,12,30]]},"page":"37-54","source":"DOI.org (Crossref)","title":"The Dipmeter Advisor - A dipmeter interpretation workstation","type":"article-journal","URL":"https://gsm.org.my/content.php?id=54&pid=702001-101136","volume":"21"},
  {"id":"Scrollbars2014","abstract":"Scrollbars, in Interlisp-D, appear on a window only when they are needed.\n\nsrc: https://vimeo.com/61556918​","accessed":{"date-parts":[[2021,5,2]]},"dimensions":"5:46","issued":{"date-parts":[[2014,9,26]]},"source":"YouTube","title":"scrollbars","type":"motion_picture","URL":"https://www.youtube.com/watch?v=Hg4YFuz6HT8"},
  {"id":"sheilInterlispDFurther1981","abstract":"The Interslip-D project was formed to develop a personal machine inplementation of Interlisp for use as an environment for research in artificial intelligence and cognitive science [Burton et al., 80b]. This note describes the principal developments since our last report almost a year ago [Burton et al., 80a].","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Sheil","given":"Beau"}],"container-title":"ACM SIGART Bulletin","container-title-short":"SIGART Bull.","DOI":"10.1145/1056743.1056745","ISSN":"0163-5719","issue":"77","issued":{"date-parts":[[1981,7,1]]},"page":"31–32","source":"July 1981","title":"Interlisp-D: further steps in the flight from time-sharing","title-short":"Interlisp-D","type":"article-journal","URL":"https://doi.org/10.1145/1056743.1056745"},
  {"id":"sproullRasterGraphics1979","abstract":"Raster-scan display terminals can significantly improve the quality of interaction with conventional computer systems. The design of a graphics package to provide a “window” into the extensive programming environment of interlisp is presented. Two aspects of the package are described: first, the functional view of display output and interactive input facilities as seen by the programmer, and second, the methods used to link the display terminal to the main computer via a packet-switched computer network. Recommendations are presented for designing operating systems and programming languages so as to simplify attaching display terminals.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Sproull","given":"Robert F."}],"collection-title":"SIGGRAPH '79","container-title":"Proceedings of the 6th annual conference on Computer graphics and interactive techniques","DOI":"10.1145/800249.807428","event-place":"New York, NY, USA","ISBN":"978-0-89791-004-0","issued":{"date-parts":[[1979,8,1]]},"page":"83–93","publisher":"Association for Computing Machinery","publisher-place":"New York, NY, USA","source":"ACM Digital Library","title":"Raster graphics for interactive programming environments","type":"paper-conference","URL":"https://doi.org/10.1145/800249.807428"},
  {"id":"stephenh.kaislerINTERLISPLanguage1986","abstract":"A reference of the INTERLISP language and system. 1144 pages, plus front matter.","accessed":{"date-parts":[[2021,4,25]]},"author":[{"literal":"Stephen H. Kaisler"}],"issued":{"date-parts":[[1986]]},"language":"eng","source":"Internet Archive","title":"INTERLISP The Language And Its Usage","type":"book","URL":"http://archive.org/details/interlisp-the-language-and-its-usage-kaisler"},
  {"id":"teitelmanAutomatedProgrammering1972","accessed":{"date-parts":[[2021,4,23]]},"author":[{"family":"Teitelman","given":"Warren"}],"issued":{"date-parts":[[1972]]},"title":"Automated programmering - the programmer's assistant. — Software Preservation Group","type":"webpage","URL":"http://www.softwarepreservation.org/projects/LISP/interlisp/Teitelman-FCJJ1972.pdf/view"},
  {"id":"teitelmanDisplayOriented1979","author":[{"family":"Teitelman","given":"Warren"}],"container-title":"International Journal of Man-Machine Studies","issue":"2","issued":{"date-parts":[[1979]]},"page":"157-187","source":"Google Scholar","title":"A display oriented programmer's assistant","type":"article-journal","URL":"https://webcache.googleusercontent.com/search?q=cache:Kk8VIwv0QH0J:https://www.ijcai.org/Proceedings/77-2/Papers/074.pdf+&cd=1&hl=en&ct=clnk&gl=pk&client=firefox-b-d","volume":"11"},
  {"id":"teitelmanHistoryInterlisp2008","abstract":"I was first introduced to Lisp in 1962 as a first year graduate student at M.I.T. in a class taught by James Slagle. Having programmed in Fortran and assembly, I was impressed with Lisp's elegance. In particular, Lisp enabled expressing recursion in a manner that was so simple that many first time observers would ask the question, \"Where does the program do the work?\" (Answer - between the parentheses!) Lisp also provided the ability to manipulate programs, since Lisp programs were themselves data (S-expressions) the same as other list structures used to represent program data. This made Lisp an ideal language for writing programs that themselves constructed programs or proved things about programs. Since I was at M.I.T. to study Artificial Intelligence, program writing programs was something that interested me greatly.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Teitelman","given":"Warren"}],"collection-title":"LISP50","container-title":"Celebrating the 50th Anniversary of Lisp","DOI":"10.1145/1529966.1529971","event-place":"New York, NY, USA","ISBN":"978-1-60558-383-9","issued":{"date-parts":[[2008,10,20]]},"page":"1–5","publisher":"Association for Computing Machinery","publisher-place":"New York, NY, USA","source":"ACM Digital Library","title":"History of Interlisp","type":"paper-conference","URL":"https://doi.org/10.1145/1529966.1529971"},
  {"id":"teitelmanINTERLISP1973","abstract":"INTERLISP (INTERactive LISP) is a LISP system currently implemented on the DEC PDP-10 under the BBN TENEX time sharing system<*R1>. INTERLISP is designed to provide the user access to the large virtual memory allowed by TENEX, with a relatively small penalty in speed (using special paging techniques described in <*R2>). Additional data types have been added, including strings, arrays, and hash association tables (hash links). The system includes a compatible compiler and interpreter. Machine code can be intermixed with INTERLISP expressions via the assemble directive of the compiler. The compiler also contains a facility for \"block compilation\" which allows a group of functions to be compiled as a unit, suppressing internal names. Each successive level of computation, from interpreted through compiled, to block-compiled provides greater speed at a cost of debugging ease.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Teitelman","given":"Warren"}],"container-title":"ACM SIGART Bulletin","container-title-short":"SIGART Bull.","DOI":"10.1145/1056786.1056787","ISSN":"0163-5719","issue":"43","issued":{"date-parts":[[1973,12,1]]},"page":"8–9","source":"December 1973","title":"INTERLISP","type":"article-journal","URL":"https://doi.org/10.1145/1056786.1056787"},
  {"id":"teitelmanINTERLISPDocumentation1974","abstract":"Documentation for INTERSLIP in the form of the INTERSLIP Reference Manual is now available and may be obtained from Warren Teitelman, Xerox Palo Alto Research Center. The new manual replaces all existing documentation, and is completely up to date (as to January, 1974). The manual is available in either loose-leaf or bound form. The lose-leaf version (binders not supplied) comes with printed separator tabs between the chapters. The bound version also includes colored divider pages between chapters, and is printed on somewhat thinner paper than the loose-leaf version, in an effort to make it 'portable' (the manual being approximately 700 pages long). Both versions contain a complete master index (approximately 1600 entries), as well as a separate index for each chapter. Although the manual is intended primarily to be used for reference, many chapters, e.g., the programmer's assistant, do-what-I-mean, CLISP, etc., include introductory and tutorial material. The manual is available in machine-readable form, and an on-line question-answering system using the manual as a data base is currently being implemented.","accessed":{"date-parts":[[2021,4,15]]},"author":[{"family":"Teitelman","given":"Warren"}],"container-title":"ACM SIGART Bulletin","container-title-short":"SIGART Bull.","DOI":"10.1145/1045183.1045186","ISSN":"0163-5719","issue":"44","issued":{"date-parts":[[1974,2,1]]},"page":"10","source":"February 1974","title":"INTERLISP documentation","type":"article-journal","URL":"https://doi.org/10.1145/1045183.1045186"},
  {"id":"teitelmanProposalResearch1976a","author":[{"family":"Teitelman","given":"W."}],"issued":{"date-parts":[[1976]]},"publisher":"XEROX CORP PALO ALTO RESEARCH CENTER CA","source":"Google Scholar","title":"Proposal for Research on Interlisp and Network-Based Systems","type":"report"},
  {"id":"weylInterlispRelational1975a","author":[{"family":"Weyl","given":"Stephen"}],"issued":{"date-parts":[[1975]]},"publisher":"STANFORD RESEARCH INST MENLO PARK CALIF","source":"Google Scholar","title":"An Interlisp Relational Data Base System.","type":"report"}
]
